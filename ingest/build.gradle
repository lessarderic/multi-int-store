/*
 * Copyright (c) 2019 Connexta, LLC
 *
 * Released under the GNU Lesser General Public License version 3; see
 * https://www.gnu.org/licenses/lgpl-3.0.html
 */
/* Build Script */
plugins {
    id "org.springframework.boot"
}

// Add itest directory to build
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file("src/itest/java")
        }
        resources.srcDir file("src/itest/resources")
    }
}

configurations {
    implementation {
        exclude group: "org.jdom" // CVE-2019-12814
    }
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation project(":retrieve-api")
    implementation Dependencies.ingestAPI()
    implementation Dependencies.transformAPI()
    implementation Dependencies.springBootStarterWeb()
    implementation Dependencies.commonsIO()

    testImplementation Dependencies.springBootStarterTest()

    integrationTestImplementation project(":retrieve-api")
    integrationTestImplementation Dependencies.ingestAPI()
    integrationTestImplementation Dependencies.transformAPI()
    integrationTestImplementation Dependencies.springBootStarterTest()
    integrationTestImplementation Dependencies.springBootStarterWeb()
}

// Perform property replacements in resource (e.g., application.yml) files
// TODO - Put the properties in a file instead of creating an inline Map
processResources {
    expand([transformApiVersion: Versions.transformAPI])
}

processIntegrationTestResources {
    expand([transformApiVersion: Versions.transformAPI])
}

dependencyCheck {
    suppressionFile = "${projectDir}/owasp-suppressions.xml"
}

springBoot {
    mainClassName = "com.connexta.ingest.IngestApplication"
}

bootJar {
    launchScript()
}

docker {
    files tasks.bootJar.outputs
    name "cnxta/cdr-ingest:${project.version}"
    buildArgs([JAR_FILE: "${tasks.bootJar.outputs.files.singleFile.name}"])
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
bootRun.dependsOn build
integrationTest.mustRunAfter test

build.finalizedBy "docker"
